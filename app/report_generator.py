import os
import yaml
from app.config import reportDirectory

def generate_all_reports(fileAnalysisList):
    componentReportsDir = os.path.join(reportDirectory, 'component_analysis')
    os.makedirs(componentReportsDir, exist_ok=True)

    componentGroups = {}
    totalCoverageSum = 0
    analyzedFileCount = 0

    for currentAnalysis in fileAnalysisList:
        componentName = currentAnalysis.get('component', 'Uncategorized')
        if componentName not in componentGroups:
            componentGroups[componentName] = []
        componentGroups[componentName].append(currentAnalysis)

        try:
            coverageString = currentAnalysis.get('estimated_line_coverage', '0%')
            coverageNumber = int(''.join(filter(str.isdigit, coverageString)))
            totalCoverageSum += coverageNumber
            analyzedFileCount += 1
        except (ValueError, TypeError):
            pass

    for componentName, componentFiles in componentGroups.items():
        sanitizedComponentName = componentName.replace(' ', '_')
        reportFilePath = os.path.join(componentReportsDir, f"{sanitizedComponentName}.md")

        with open(reportFilePath, 'w', encoding='utf-8') as reportFile:
            reportFile.write(f"# Analysis for Component: {componentName}\n\n")

            for fileData in componentFiles:
                reportFile.write(f"### File: `{fileData.get('file_name', 'N/A')}`\n")
                reportFile.write(f"- **Summary:** {fileData.get('summary', 'N/A')}\n")
                reportFile.write(f"- **Testability Score:** {fileData.get('testability_score', 'N/A')}\n")
                reportFile.write(f"- **Estimated Line Coverage:** {fileData.get('estimated_line_coverage', 'N/A')}\n")
                reportFile.write("- **Suggested Test Cases:**\n")

                if 'suggested_test_cases' in fileData and fileData['suggested_test_cases']:
                    for testCase in fileData['suggested_test_cases']:
                        reportFile.write(f"  - {testCase}\n")
                reportFile.write("\n---\n")

    aggregatedReportData = {
        "project_summary": "This report was generated by analyzing each C++ source file individually and aggregating the results.",
        "final_coverage_report": {
            "coverage_by_component": [],
            "overall_estimated_coverage": f"{totalCoverageSum / analyzedFileCount if analyzedFileCount > 0 else 0:.2f}%",
            "recommendations": "Review the detailed component reports for specific test cases. Focus on improving the testability of components with low scores. Consider adding integration tests for how controllers and models interact."
        }
    }

    for componentName, componentFiles in componentGroups.items():
        componentCoverageSum = 0
        componentFileCount = 0

        for fileData in componentFiles:
            try:
                coverageString = fileData.get('estimated_line_coverage', '0%')
                componentCoverageSum += int(''.join(filter(str.isdigit, coverageString)))
                componentFileCount += 1
            except (ValueError, TypeError):
                pass

        averageComponentCoverage = f"{componentCoverageSum / componentFileCount if componentFileCount > 0 else 0:.2f}%"
        aggregatedReportData["final_coverage_report"]["coverage_by_component"].append({
            "component": componentName,
            "coverage": averageComponentCoverage
        })

    summaryReportPath = os.path.join(reportDirectory, 'coverage_summary_report.md')
    with open(summaryReportPath, 'w', encoding='utf-8') as summaryFile:
        summaryFile.write("# Overall Project Analysis Report\n\n")
        summaryFile.write(f"## {aggregatedReportData['project_summary']}\n\n")

        coverageReport = aggregatedReportData['final_coverage_report']
        summaryFile.write("## Final Coverage Report\n")
        summaryFile.write(f"- **Overall Estimated Coverage:** **{coverageReport.get('overall_estimated_coverage', 'N/A')}**\n")
        summaryFile.write("- **Coverage by Component:**\n")

        if 'coverage_by_component' in coverageReport and coverageReport['coverage_by_component']:
            for componentInfo in coverageReport['coverage_by_component']:
                summaryFile.write(f"  - {componentInfo.get('component', 'N/A')}: {componentInfo.get('coverage', 'N/A')}\n")

        summaryFile.write("\n## Recommendations\n")
        summaryFile.write(f"{coverageReport.get('recommendations', 'N/A')}\n")

    return aggregatedReportData

def save_yaml_report(reportData):
    yamlOutputPath = os.path.join(reportDirectory, 'coverage_report.yaml')
    with open(yamlOutputPath, 'w', encoding='utf-8') as yamlFile:
        yaml.dump(reportData, yamlFile, sort_keys=False, default_flow_style=False, indent=2)
    return yamlOutputPath

def print_terminal_report(reportData):
    if 'final_coverage_report' not in reportData:
        print("Could not find 'final_coverage_report' in the aggregated data.")
        return

    coverageReport = reportData['final_coverage_report']

    print("="*60)
    print("              ESTIMATED CODE COVERAGE REPORT")
    print("="*60)

    if 'coverage_by_component' in coverageReport and coverageReport['coverage_by_component']:
        print(f"{'Component':<30} | {'Estimated Coverage':>20}")
        print("-"*60)
        for componentData in coverageReport['coverage_by_component']:
            componentName = componentData.get('component', 'N/A')
            componentCoverage = componentData.get('coverage', 'N/A')
            print(f"{componentName:<30} | {componentCoverage:>20}")

    print("-"*60)
    overallCoverage = coverageReport.get('overall_estimated_coverage', 'N/A')
    print(f"{'OVERALL ESTIMATED COVERAGE':<30} | {overallCoverage:>20}")
    print("="*60)

    if 'recommendations' in coverageReport:
        print("\nRECOMMENDATIONS:\n")
        print(coverageReport.get('recommendations', 'N/A'))

    print("\n")
